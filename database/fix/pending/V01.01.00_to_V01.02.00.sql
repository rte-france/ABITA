UPDATE FWK_PARAMETER SET PRM_VALUE = '01.02.00' WHERE PRM_ID = 3041;

-- Table d’archivage des occupants
CREATE TABLE HISTORY_TENANT (
    HTE_ID NUMBER(19,0) NOT NULL,
	TEN_ID NUMBER(19,0) NOT NULL,
	HTE_MONTH NUMBER(2,0) NOT NULL,
	HTE_YEAR NUMBER(4,0) NOT NULL,
	HTE_REFERENCE VARCHAR2(50 CHAR) NOT NULL,
	HTE_MANAGERIAL_EMP VARCHAR2(1 CHAR),
	HTE_TTE_NT_HEADER_LABEL VARCHAR2(50 CHAR) NOT NULL,
	HTE_ACTUAL_SALARY NUMBER(10,3),
	HTE_REFERENCE_GROSS_SALARY NUMBER(10,3),
	CONSTRAINT PK_HISTORY_TENANT PRIMARY KEY(HTE_ID) USING INDEX TABLESPACE TBS_ABITA_IDX,
	CONSTRAINT FK_HTE_2_TEN FOREIGN KEY (TEN_ID) REFERENCES TENANT (TEN_ID),
	CONSTRAINT UK_TEN_MONTH_YEAR UNIQUE (TEN_ID, HTE_MONTH, HTE_YEAR)
);

CREATE SEQUENCE SEQ_HISTORY_TENANT
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

-- Table d’archivage des logements
CREATE TABLE HISTORY_HOUSING (
    HHO_ID NUMBER(19,0) NOT NULL,
	HOU_ID NUMBER(19,0) NOT NULL,
	HHO_MONTH NUMBER(2,0) NOT NULL,
	HHO_YEAR NUMBER(4,0) NOT NULL,
	HHO_REVISED_SURFACE_AREA NUMBER(6,2) NOT NULL,
	HHO_ROOM_COUNT NUMBER(3,0) NOT NULL,
	HHO_HNA_NATURE_OF_LOCAL VARCHAR2(3 CHAR),
	HHO_THP_NAME VARCHAR2(50 CHAR),
	HHO_RCA_1ST_10_SQR_METER_PRICE NUMBER(10,2) NOT NULL,
	HHO_RCA_NEXT_SQR_METER_PRICE NUMBER(10,2) NOT NULL,
	CONSTRAINT PK_HISTORY_HOUSING PRIMARY KEY(HHO_ID) USING INDEX TABLESPACE TBS_ABITA_IDX,
	CONSTRAINT FK_HHO_2_HOU FOREIGN KEY (HOU_ID) REFERENCES HOUSING (HOU_ID),
    CONSTRAINT UK_HOU_MONTH_YEAR UNIQUE (HOU_ID, HHO_MONTH, HHO_YEAR)
);

CREATE SEQUENCE SEQ_HISTORY_HOUSING
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

-- Table d’archivage des avantages en nature
CREATE TABLE HISTORY_BENEFITS (
    HBE_ID NUMBER(19,0) NOT NULL,
	BLE_ID NUMBER(19,0) NOT NULL,
	HBE_MONTH NUMBER(2,0) NOT NULL,
	HBE_YEAR NUMBER(4,0) NOT NULL,
	HBE_MINIMUM_THRESHOLD NUMBER(7,3) NOT NULL,
	HBE_BENEFITS_ONE_ROOM NUMBER(7,3) NOT NULL,
	HBE_BENEFITS_MANY_ROOMS NUMBER(7,3) NOT NULL,
	CONSTRAINT PK_HISTORY_BENEFITS PRIMARY KEY(HBE_ID) USING INDEX TABLESPACE TBS_ABITA_IDX,
	CONSTRAINT FK_HBE_2_BLE FOREIGN KEY (BLE_ID) REFERENCES BENEFITS_LEVEL (BLE_ID),
    CONSTRAINT UK_BLE_MONTH_YEAR UNIQUE (BLE_ID, HBE_MONTH, HBE_YEAR)
);

CREATE SEQUENCE SEQ_HISTORY_BENEFITS
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

-- Table d’archivage des contrats
CREATE TABLE HISTORY_CONTRACT (
    HCO_ID NUMBER(19,0) NOT NULL,
	CON_ID NUMBER(19,0) NOT NULL,
	HCO_MONTH NUMBER(2,0) NOT NULL,
	HCO_YEAR NUMBER(4,0) NOT NULL,
	HCO_END_VALIDITY_DATE DATE,
	HCO_MARKET_RENT_PRICE NUMBER(10,3),
	HCO_RENT_PRICE_LIMIT NUMBER(10,3),
	HCO_GARAGE_RENT NUMBER(10,3),
	HCO_GARDEN_RENT NUMBER(10,3),
	HCO_EXTRA_RENT NUMBER(10,3),
	HCO_EXPECTED_CHARGE_COST NUMBER(10,3),
	HCO_REAL_ESTATE_RENTAL_VALUE NUMBER(10,3),
	HCO_HOUSEHOLD_SIZE NUMBER(3,0) NOT NULL,
	HCO_RTP_TECHNICAL_CODE VARCHAR2(3 CHAR) NOT NULL,
	HCO_RTP_HOUSING_INDEX VARCHAR2(2 CHAR) NOT NULL,
	HCO_FOA_LABEL VARCHAR2(50 CHAR) NOT NULL,
	HCO_TERMINATION_SAVING_AMOUNT NUMBER(10,3) NOT NULL,
	HCO_ADDED_WITHDRAWN_RENT NUMBER(10,3) NOT NULL,
	HHO_ID NUMBER(19,0) NOT NULL, 
    HTE_ID NUMBER(19,0) NOT NULL,
	CONSTRAINT PK_HISTORY_CONTRACT PRIMARY KEY(HCO_ID) USING INDEX TABLESPACE TBS_ABITA_IDX,
	CONSTRAINT FK_HCO_2_CON FOREIGN KEY (CON_ID) REFERENCES CONTRACT (CON_ID),
	CONSTRAINT FK_HCO_2_HHO FOREIGN KEY (HHO_ID) REFERENCES HISTORY_HOUSING (HHO_ID),
	CONSTRAINT FK_HCO_2_HTE FOREIGN KEY (HTE_ID) REFERENCES HISTORY_TENANT (HTE_ID),
    CONSTRAINT UK_CON_MONTH_YEAR UNIQUE (CON_ID, HCO_MONTH, HCO_YEAR)
);

CREATE SEQUENCE SEQ_HISTORY_CONTRACT
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

-- Vue de calcul du loyer écrêté basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_LOP_RENT_CALC (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
	HHO_ID,
	HTE_ID,
	LOP_RENT
	) AS SELECT
	    HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
		HCO.HHO_ID,
		HCO.HTE_ID,
		ROUND(NVL(HTE.HTE_REFERENCE_GROSS_SALARY,0) * 0.15,2) AS LOP_RENT
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_TENANT HTE ON HCO.HTE_ID = HTE.HTE_ID
;

-- Vue de calcul du loyer surface corrigé basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_LSC_CALC (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
    HHO_ID,
    HTE_ID,
	LSC
	) AS SELECT
        HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
        HCO.HHO_ID,
        HCO.HTE_ID,
		ROUND((LEAST(HHO.HHO_REVISED_SURFACE_AREA, 10) * HHO.HHO_RCA_1ST_10_SQR_METER_PRICE) + (GREATEST(HHO.HHO_REVISED_SURFACE_AREA - 10, 0) * HHO.HHO_RCA_NEXT_SQR_METER_PRICE),2) AS LSC
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_HOUSING HHO ON HCO.HHO_ID = HHO.HHO_ID
;

-- Vue de calcul du loyer écrêté basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_SHRTTRM_C_DSC_CALC (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
    HHO_ID,
    HTE_ID,
	STCD
	) AS SELECT
        LSC_C.HCO_ID,
		LSC_C.CON_ID,
		LSC_C.HCO_MONTH,
		LSC_C.HCO_YEAR,
        LSC_C.HHO_ID,
        LSC_C.HTE_ID,
		ROUND(LSC_C.LSC * 0.075,2) AS STCD
	FROM VUE_HISTORY_LSC_CALC LSC_C
;

-- Vue de calcul du coefficient n/N basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_NN_COEF_CALC (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
    HHO_ID,
    HTE_ID,
	NNCOEF
	) AS SELECT
        HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
        HCO.HHO_ID,
        HCO.HTE_ID,
		ROUND((HCO.HCO_HOUSEHOLD_SIZE + DECODE(HTE.HTE_MANAGERIAL_EMP, '1', 1, 0)) / NULLIF(HHO.HHO_ROOM_COUNT + DECODE(HCO.HCO_RTP_TECHNICAL_CODE, 'LAS', 1, 0), 0), 8) AS NNCOEF
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_HOUSING HHO ON HCO.HHO_ID = HHO.HHO_ID
	JOIN HISTORY_TENANT HTE ON HCO.HTE_ID = HTE.HTE_ID
;

-- Vue de calcul du loyer net agent basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_LNA_CALC (
    HCO_ID,
    CON_ID,
	HCO_MONTH,
	HCO_YEAR,
    HHO_ID,
    HTE_ID,
	LNA
	) AS SELECT
        HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
        HCO.HHO_ID,
        HCO.HTE_ID,
		ROUND(DECODE(HCO.HCO_RTP_TECHNICAL_CODE, 'LAS', LEAST(VUE_HISTORY_NN_COEF_CALC.NNCOEF * (VUE_HISTORY_LSC_CALC.LSC - VUE_HISTORY_SHRTTRM_C_DSC_CALC.STCD), VUE_HISTORY_LOP_RENT_CALC.LOP_RENT), 'LMA', NVL(HCO.HCO_MARKET_RENT_PRICE,0), 'LBA', LEAST(VUE_HISTORY_LSC_CALC.LSC - NVL(VUE_HISTORY_SHRTTRM_C_DSC_CALC.STCD, 0), VUE_HISTORY_LOP_RENT_CALC.LOP_RENT), NVL(HCO.HCO_RENT_PRICE_LIMIT, 0)), 2) AS LNA
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_HOUSING HHO ON HCO.HHO_ID = HHO.HHO_ID
	JOIN HISTORY_TENANT HTE ON HCO.HTE_ID = HTE.HTE_ID
	JOIN VUE_HISTORY_LOP_RENT_CALC ON HCO.HCO_ID = VUE_HISTORY_LOP_RENT_CALC.HCO_ID
	JOIN VUE_HISTORY_LSC_CALC ON HCO.HCO_ID = VUE_HISTORY_LSC_CALC.HCO_ID
	JOIN VUE_HISTORY_SHRTTRM_C_DSC_CALC ON HCO.HCO_ID = VUE_HISTORY_SHRTTRM_C_DSC_CALC.HCO_ID
	JOIN VUE_HISTORY_NN_COEF_CALC on HCO.HCO_ID = VUE_HISTORY_NN_COEF_CALC.HCO_ID
;

-- Vue de calcul du loyer prélevé basé sur l’archivage
CREATE OR REPLACE VIEW VUE_HISTORY_WD_RENT_CALC (
    HCO_ID,
    CON_ID,
    HCO_MONTH,
    HCO_YEAR,
    HHO_ID,
    HTE_ID,
    WITHDRAWN_RENT
    ) AS SELECT
        HCO.HCO_ID,
        HCO.CON_ID,
        HCO.HCO_MONTH,
        HCO.HCO_YEAR,
        HCO.HHO_ID,
        HCO.HTE_ID,
        VUE_HISTORY_LNA_CALC.LNA + NVL(HCO.HCO_GARAGE_RENT, 0) + (NVL(HCO.HCO_GARDEN_RENT, 0) - 0.075 * NVL(HCO.HCO_GARDEN_RENT, 0)) + NVL(HCO.HCO_EXTRA_RENT, 0) + NVL(HCO.HCO_EXPECTED_CHARGE_COST, 0) AS WITHDRAWN_RENT
  FROM HISTORY_CONTRACT HCO
  JOIN VUE_HISTORY_LNA_CALC ON HCO.HCO_ID = VUE_HISTORY_LNA_CALC.HCO_ID
;

-- Fonction de calcul des avantages en nature basé sur l’archivage
CREATE OR REPLACE FUNCTION GET_HISTORY_CALCULATED_BENEFIT (
	SALARY NUMBER,
	HHO_ROOM_COUNT NUMBER,
	HCO_MONTH NUMBER,
	HCO_YEAR NUMBER
) RETURN NUMBER AS RESULTAT NUMBER;
BEGIN   
	SELECT HHO_ROOM_COUNT * DECODE(HHO_ROOM_COUNT, 1, HBE_BENEFITS_ONE_ROOM, HBE_BENEFITS_MANY_ROOMS) 
	INTO RESULTAT
	FROM (
		SELECT TMP.*, ROWNUM RN 
		FROM (
			SELECT HBE.*
			FROM HISTORY_BENEFITS HBE
			WHERE SALARY - HBE.HBE_MINIMUM_THRESHOLD >= 0
			AND HBE.HBE_MONTH = HCO_MONTH
			AND HBE.HBE_YEAR = HCO_YEAR
			ORDER BY SALARY - HBE.HBE_MINIMUM_THRESHOLD
		) TMP
	)
	WHERE RN = 1;
	RETURN RESULTAT;
END GET_HISTORY_CALCULATED_BENEFIT;
/

-- Vue des contrats avec calculs dynamiques basé sur l’archivage
CREATE OR REPLACE VIEW HISTORY_CONTRACT_DETAIL (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
	HCO_END_VALIDITY_DATE,
	HCO_MARKET_RENT_PRICE,
	HCO_RENT_PRICE_LIMIT,
	HCO_GARAGE_RENT,
	HCO_GARDEN_RENT,
	HCO_EXTRA_RENT,
	HCO_EXPECTED_CHARGE_COST,
	HCO_REAL_ESTATE_RENTAL_VALUE,
	HCO_HOUSEHOLD_SIZE,
	HCO_RTP_TECHNICAL_CODE,
	HCO_RTP_HOUSING_INDEX,
	HCO_FOA_LABEL,
	HCO_TERMINATION_SAVING_AMOUNT,
	HCO_ADDED_WITHDRAWN_RENT,
	HHO_ID,
    HTE_ID,
	HCD_LOP_RENT,
	HCD_REVISED_SURFACE_AREA_RENT,
	HCD_SHORTTERM_CONTRACT_DISCO,
	HCD_N_N_COEF,
	HCD_NET_AGENT_RENT,
    HCD_CALCULATED_BENEFITS,
    HCD_WITHDRAWN_RENT
	) AS SELECT
	    HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
		HCO.HCO_END_VALIDITY_DATE,
		HCO.HCO_MARKET_RENT_PRICE,
		HCO.HCO_RENT_PRICE_LIMIT,
		HCO.HCO_GARAGE_RENT,
		HCO.HCO_GARDEN_RENT,
		HCO.HCO_EXTRA_RENT,
		HCO.HCO_EXPECTED_CHARGE_COST,
		HCO.HCO_REAL_ESTATE_RENTAL_VALUE,
		HCO.HCO_HOUSEHOLD_SIZE,
		HCO.HCO_RTP_TECHNICAL_CODE,
		HCO.HCO_RTP_HOUSING_INDEX,
		HCO.HCO_FOA_LABEL,
		HCO.HCO_TERMINATION_SAVING_AMOUNT,
		HCO.HCO_ADDED_WITHDRAWN_RENT,
		HCO.HHO_ID, 
        HCO.HTE_ID,
		VUE_HISTORY_LOP_RENT_CALC.LOP_RENT AS HCD_LOP_RENT,
		VUE_HISTORY_LSC_CALC.LSC AS HCD_REVISED_SURFACE_AREA_RENT,
		VUE_HISTORY_SHRTTRM_C_DSC_CALC.STCD AS HCD_SHORTTERM_CONTRACT_DISCO,
		VUE_HISTORY_NN_COEF_CALC.NNCOEF AS HCD_N_N_COEF,
		VUE_HISTORY_LNA_CALC.LNA AS HCD_NET_AGENT_RENT,
		GET_HISTORY_CALCULATED_BENEFIT(HTE.HTE_ACTUAL_SALARY, HHO.HHO_ROOM_COUNT, HCO.HCO_MONTH, HCO.HCO_YEAR) AS HCD_CALCULATED_BENEFITS,
		VUE_HISTORY_WD_RENT_CALC.WITHDRAWN_RENT AS HCD_WITHDRAWN_RENT
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_HOUSING HHO ON HCO.HHO_ID = HHO.HHO_ID
	JOIN HISTORY_TENANT HTE ON HCO.HTE_ID = HTE.HTE_ID
	JOIN VUE_HISTORY_LOP_RENT_CALC ON HCO.HCO_ID = VUE_HISTORY_LOP_RENT_CALC.HCO_ID
	JOIN VUE_HISTORY_LSC_CALC ON HCO.HCO_ID = VUE_HISTORY_LSC_CALC.HCO_ID
	JOIN VUE_HISTORY_SHRTTRM_C_DSC_CALC ON HCO.HCO_ID = VUE_HISTORY_SHRTTRM_C_DSC_CALC.HCO_ID
	JOIN VUE_HISTORY_NN_COEF_CALC on HCO.HCO_ID = VUE_HISTORY_NN_COEF_CALC.HCO_ID
	JOIN VUE_HISTORY_LNA_CALC ON HCO.HCO_ID = VUE_HISTORY_LNA_CALC.HCO_ID
	JOIN VUE_HISTORY_WD_RENT_CALC ON HCO.HCO_ID = VUE_HISTORY_WD_RENT_CALC.HCO_ID
;

-- Procédure d’archivage des occupants
CREATE OR REPLACE PROCEDURE HISTORIZE_TENANT (
    PN$MONTH IN HISTORY_TENANT.HTE_MONTH%TYPE,
    PN$YEAR IN HISTORY_TENANT.HTE_YEAR%TYPE
) IS
    CURSOR TenantData IS 
        SELECT *
        FROM TENANT TEN
        INNER JOIN TYPE_TENANT TTE ON TEN.TTE_ID = TTE.TTE_ID;
BEGIN
    FOR oTenant IN TenantData LOOP
        INSERT INTO HISTORY_TENANT (
            HTE_ID,
            TEN_ID,
            HTE_MONTH,
            HTE_YEAR,
            HTE_REFERENCE,
            HTE_MANAGERIAL_EMP,
            HTE_TTE_NT_HEADER_LABEL,
            HTE_ACTUAL_SALARY,
            HTE_REFERENCE_GROSS_SALARY
        )
        VALUES(
            SEQ_HISTORY_TENANT.nextVal,
            oTenant.TEN_ID,
            PN$MONTH,
            PN$YEAR,
            oTenant.TEN_REFERENCE,
            oTenant.TEN_MANAGERIAL_EMP,
            oTenant.TTE_NT_HEADER_LABEL,
            oTenant.TEN_ACTUAL_SALARY,
            oTenant.TEN_REFERENCE_GROSS_SALARY
        );
    END LOOP;
END;
/

-- Procédure d’archivage des logements
CREATE OR REPLACE PROCEDURE HISTORIZE_HOUSING (
    PN$MONTH IN HISTORY_HOUSING.HHO_MONTH%TYPE,
    PN$YEAR IN HISTORY_HOUSING.HHO_YEAR%TYPE
) IS
    CURSOR HousingData IS 
        SELECT *
        FROM HOUSING HOU
        LEFT JOIN HOUSING_NATURE HNA ON HOU.HNA_ID = HNA.HNA_ID
        INNER JOIN ROOM_CATEGORY RCA ON HOU.RCA_ID = RCA.RCA_ID;
    LC$THP_NAME THIRD_PARTY.THP_NAME%TYPE;
BEGIN
    FOR oHousing IN HousingData LOOP

        BEGIN
	        SELECT THP_NAME INTO LC$THP_NAME FROM (
	            SELECT THP_NAME
	            FROM THIRD_PARTY THP
	            INNER JOIN THIRD_PARTY_CONTRACT TPC ON THP.THP_ID = TPC.THP_ID
	            INNER JOIN HOUSING HOU ON TPC.HOU_ID = HOU.HOU_ID
	            WHERE HOU.HOU_ID = oHousing.HOU_ID
	            AND TPC.TPC_CANCELLATION_DATE IS NULL
	            ORDER BY TPC.TPC_START_VALIDITY_DATE DESC
	        ) WHERE ROWNUM = 1;
       EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    LC$THP_NAME := NULL;
        END;

        INSERT INTO HISTORY_HOUSING (
            HHO_ID,
            HOU_ID,
            HHO_MONTH,
            HHO_YEAR,
            HHO_REVISED_SURFACE_AREA,
            HHO_ROOM_COUNT,
            HHO_HNA_NATURE_OF_LOCAL,
            HHO_THP_NAME,
            HHO_RCA_1ST_10_SQR_METER_PRICE,
            HHO_RCA_NEXT_SQR_METER_PRICE
        )
        VALUES(
            SEQ_HISTORY_HOUSING.nextVal,
            oHousing.HOU_ID,
            PN$MONTH,
            PN$YEAR,
            oHousing.HOU_REVISED_SURFACE_AREA,
            oHousing.HOU_ROOM_COUNT,
            oHousing.HNA_NATURE_OF_LOCAL,
            LC$THP_NAME,
            oHousing.RCA_FIRST_10_SQR_METER_PRICE,
            oHousing.RCA_NEXT_SQR_METER_PRICE
        );
    END LOOP;
END;
/

-- Procédure d’archivage des avantages en nature
CREATE OR REPLACE PROCEDURE HISTORIZE_BENEFITS (
    PN$MONTH IN HISTORY_BENEFITS.HBE_MONTH%TYPE,
    PN$YEAR IN HISTORY_BENEFITS.HBE_YEAR%TYPE
) IS
    CURSOR BenefitsData IS 
        SELECT *
        FROM BENEFITS_LEVEL BLE;
BEGIN
    FOR oBenefits IN BenefitsData LOOP
        INSERT INTO HISTORY_BENEFITS (
            HBE_ID,
		    BLE_ID,
		    HBE_MONTH,
		    HBE_YEAR,
		    HBE_MINIMUM_THRESHOLD,
		    HBE_BENEFITS_ONE_ROOM,
		    HBE_BENEFITS_MANY_ROOMS
        )
        VALUES(
            SEQ_HISTORY_BENEFITS.nextVal,
            oBenefits.BLE_ID,
            PN$MONTH,
            PN$YEAR,
            oBenefits.BLE_MINIMUM_THRESHOLD,
            oBenefits.BLE_BENEFITS_ONE_ROOM,
            oBenefits.BLE_BENEFITS_MANY_ROOMS
        );
    END LOOP;
END;
/

-- Procédure d’archivage des contrats
CREATE OR REPLACE PROCEDURE HISTORIZE_CONTRACT (
    PN$MONTH IN HISTORY_CONTRACT.HCO_MONTH%TYPE,
    PN$YEAR IN HISTORY_CONTRACT.HCO_YEAR%TYPE
) IS
    CURSOR ContractData IS 
        SELECT 
            CON.*,
            FOA.FOA_LABEL,
            RTP.RTP_TECHNICAL_CODE,
            RTP.RTP_HOUSING_INDEX,
            HHO.HHO_ID AS HHO_ID,
            HTE.HTE_ID AS HTE_ID
        FROM CONTRACT CON
        INNER JOIN FIELD_OF_ACTIVITY FOA ON CON.FOA_ID = FOA.FOA_ID
        INNER JOIN RENT_TYPOLOGY RTP ON CON.RTP_ID = RTP.RTP_ID
        INNER JOIN HISTORY_HOUSING HHO ON CON.HOU_ID = HHO.HOU_ID AND HHO.HHO_MONTH = PN$MONTH AND HHO.HHO_YEAR = PN$YEAR
        INNER JOIN HISTORY_TENANT HTE ON CON.TEN_ID = HTE.TEN_ID AND HTE.HTE_MONTH = PN$MONTH AND HTE.HTE_YEAR = PN$YEAR;
BEGIN
    FOR oContract IN ContractData LOOP
        INSERT INTO HISTORY_CONTRACT (
            HCO_ID,
		    CON_ID,
		    HCO_MONTH,
		    HCO_YEAR,
		    HCO_END_VALIDITY_DATE,
		    HCO_MARKET_RENT_PRICE,
		    HCO_RENT_PRICE_LIMIT,
		    HCO_GARAGE_RENT,
		    HCO_GARDEN_RENT,
		    HCO_EXTRA_RENT,
		    HCO_EXPECTED_CHARGE_COST,
		    HCO_REAL_ESTATE_RENTAL_VALUE,
		    HCO_HOUSEHOLD_SIZE,
		    HCO_RTP_TECHNICAL_CODE,
		    HCO_RTP_HOUSING_INDEX,
		    HCO_FOA_LABEL,
		    HCO_TERMINATION_SAVING_AMOUNT,
		    HCO_ADDED_WITHDRAWN_RENT,
            HHO_ID,
            HTE_ID
        )
        VALUES(
            SEQ_HISTORY_CONTRACT.nextVal,
            oContract.CON_ID,
            PN$MONTH,
            PN$YEAR,
            oContract.CON_END_VALIDITY_DATE,
            oContract.CON_MARKET_RENT_PRICE,
            oContract.CON_RENT_PRICE_LIMIT,
            oContract.CON_GARAGE_RENT,
            oContract.CON_GARDEN_RENT,
            oContract.CON_EXTRA_RENT,
            oContract.CON_EXPECTED_CHARGE_COST,
            oContract.CON_REAL_ESTATE_RENTAL_VALUE,
            oContract.CON_HOUSEHOLD_SIZE,
            oContract.RTP_TECHNICAL_CODE,
            oContract.RTP_HOUSING_INDEX,
            oContract.FOA_LABEL,
            oContract.CON_TERMINATION_SAVING_AMOUNT,
            oContract.CON_ADDED_WITHDRAWN_RENT,
            oContract.HHO_ID,
            oContract.HTE_ID
        );
    END LOOP;
END;
/

-- Modification de la table des contrats : nouvelle colonne concernant la prise en compte du contrat lors de la prochaine rétroactivité
ALTER TABLE CONTRACT ADD (
    CON_RETROACTIVITYS_MONTHS NUMBER(6,0) DEFAULT 0 NOT NULL
);

-- Modification de la vue du calcul du loyer prélevé : nouvelle colonne concernant la prise en compte du contrat lors de la prochaine rétroactivité
CREATE OR REPLACE VIEW CONTRACT_DETAIL
    (CON_ID, CON_REFERENCE, CON_SIGNATURE, CON_START_VALIDITY_DATE, CON_END_VALIDITY_DATE, 
     CON_MARKET_RENT_PRICE, CON_RENT_PRICE_LIMIT, CON_GARAGE_RENT, CON_GARDEN_RENT, CON_EXTRA_RENT, 
     CON_EXPECTED_CHARGE_COST, CON_ANNUAL_CLEARANCE_CHARGES, CON_GARBAGE_INVOICING, CON_WATER_INVOICING, CON_INSURANCE_REIMBURSEMENT, 
     CON_HOUSING_TAX_REIMBURSEMENT, CON_GARBAGE_REIMBURSEMENT, CON_OTHER_INVOICING_LABEL, CON_OTHER_INVOICING_AMOUNT, 
     CON_ADDED_WITHDRAWN_RENT, CON_LAST_WITHDRAWN_DATE, CON_TERMINATION_SAVINGS, 
     CON_TERMINATION_SAVING_AMOUNT, CON_LAST_SAVING_DATE, CON_REAL_ESTATE_RENTAL_VALUE, CON_RETROACTIVITYS_MONTHS,
     HOU_ID, TEN_ID, RTP_ID, TER_ID, FIE_ID, CCE_ID, PME_ID, 
     CON_N_N_COEF, CON_NET_AGENT_RENT, CON_SHORTTERM_CONTRACT_DISCO, CON_LOP_RENT, CON_WITHDRAWN_RENT, CON_HOUSEHOLD_SIZE,
     COD_REVISED_SURFACE_AREA, COD_REVISED_SURFACE_AREA_RENT, COD_N_N_COEF, COD_NET_AGENT_RENT, COD_SHORTTERM_CONTRACT_DISCO, 
     COD_LOP_RENT, COD_WITHDRAWN_RENT, COD_ADDED_WITHDRAWN_RENT, COD_TERMINATION_SAVING_MONTH, COD_TERMINATION_SAVING_AMOUNT,
     COD_CALCULATED_BENEFITS)
    AS    
  SELECT 
    C.CON_ID, C.CON_REFERENCE, C.CON_SIGNATURE, C.CON_START_VALIDITY_DATE, C.CON_END_VALIDITY_DATE, 
    C.CON_MARKET_RENT_PRICE, C.CON_RENT_PRICE_LIMIT, C.CON_GARAGE_RENT, C.CON_GARDEN_RENT, C.CON_EXTRA_RENT, 
    C.CON_EXPECTED_CHARGE_COST, C.CON_ANNUAL_CLEARANCE_CHARGES, CON_GARBAGE_INVOICING, CON_WATER_INVOICING, CON_INSURANCE_REIMBURSEMENT, 
    CON_HOUSING_TAX_REIMBURSEMENT, CON_GARBAGE_REIMBURSEMENT, CON_OTHER_INVOICING_LABEL, CON_OTHER_INVOICING_AMOUNT, 
    C.CON_ADDED_WITHDRAWN_RENT, C.CON_LAST_WITHDRAWN_DATE, C.CON_TERMINATION_SAVINGS, 
    C.CON_TERMINATION_SAVING_AMOUNT, C.CON_LAST_SAVING_DATE, C.CON_REAL_ESTATE_RENTAL_VALUE, C.CON_RETROACTIVITYS_MONTHS,
    C.HOU_ID, C.TEN_ID, C.RTP_ID, C.TER_ID, C.FOA_ID, C.CCE_ID, C.PME_ID,
    C.CON_N_N_COEF, C.CON_NET_AGENT_RENT, C.CON_SHORTTERM_CONTRACT_DISCO, C.CON_LOP_RENT, C.CON_WITHDRAWN_RENT, C.CON_HOUSEHOLD_SIZE,    
    H.HOU_REVISED_SURFACE_AREA AS COD_REVISED_SURFACE_AREA,
    VUE_LSC_CALC.LSC AS COD_REVISED_SURFACE_AREA_RENT,
    VUE_NN_COEF_CALC.NNCOEF AS COD_N_N_COEF,
    VUE_LNA_CALC.LNA AS COD_NET_AGENT_RENT,
    VUE_SHRTTRM_CNTRCT_DSC_CALC.STCD AS COD_SHORTTERM_CONTRACT_DISCO,
    VUE_LOP_RENT_CALC.LOP_RENT AS COD_LOP_RENT,
    VUE_WITHDRAWN_RENT_CALC.WITHDRAWN_RENT AS COD_WITHDRAWN_RENT,
    c.con_added_withdrawn_rent + VUE_WITHDRAWN_RENT_CALC.WITHDRAWN_RENT AS COD_ADDED_WITHDRAWN_RENT,
    VUE_TERM_SAVING_MONTH_CALC.TERM_SAVING_MONTH AS COD_TERMINATION_SAVING_MONTH,
    c.con_termination_saving_amount + VUE_TERM_SAVING_MONTH_CALC.TERM_SAVING_MONTH AS COD_TERMINATION_SAVING_AMOUNT,
    GET_CALCULATED_BENEFIT(t.ten_actual_salary, h.hou_room_count) AS COD_CALCULATED_BENEFITS
  FROM CONTRACT C
  JOIN HOUSING H on C.HOU_ID = H.HOU_ID
  JOIN TENANT T on C.TEN_ID = T.TEN_ID
  JOIN VUE_LSC_CALC on C.CON_ID = VUE_LSC_CALC.CON_ID
  JOIN VUE_NN_COEF_CALC on C.CON_ID = VUE_NN_COEF_CALC.CON_ID
  JOIN VUE_SHRTTRM_CNTRCT_DSC_CALC on C.CON_ID = VUE_SHRTTRM_CNTRCT_DSC_CALC.CON_ID
  JOIN VUE_LOP_RENT_CALC on C.CON_ID = VUE_LOP_RENT_CALC.CON_ID
  JOIN VUE_LNA_CALC on C.CON_ID = VUE_LNA_CALC.CON_ID
  JOIN VUE_WITHDRAWN_RENT_CALC on C.CON_ID = VUE_WITHDRAWN_RENT_CALC.CON_ID
  JOIN VUE_TERM_SAVING_MONTH_CALC on C.CON_ID = VUE_TERM_SAVING_MONTH_CALC.CON_ID;
  
CREATE SEQUENCE SEQ_HISTORY_AMOUNT
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE; 

CREATE TABLE HISTORY_AMOUNT (
  HAM_ID NUMBER(19,0) NOT NULL,
  CON_ID NUMBER(19,0) NOT NULL,
  HAM_TYPE VARCHAR2(50 CHAR) NOT NULL,
  HAM_MONTH NUMBER(2,0) NOT NULL,
  HAM_YEAR NUMBER(4,0) NOT NULL,
  HAM_RETROACTIVITY_MONTH NUMBER(2,0) NOT NULL,
  HAM_RETROACTIVITY_YEAR NUMBER(4,0) NOT NULL,
  HAM_DETAILS CLOB,
  CONSTRAINT PK_HISTORY_AMOUNT PRIMARY KEY(HAM_ID) USING INDEX TABLESPACE TBS_ABITA_IDX,
  CONSTRAINT FK_HAM_2_CON FOREIGN KEY (CON_ID) REFERENCES CONTRACT (CON_ID)
);

CREATE SEQUENCE SEQ_HISTORY_REPORTING
START WITH 1 
INCREMENT BY 1 
NOMAXVALUE;

CREATE TABLE HISTORY_REPORTING (
    HRE_ID NUMBER(19,0) NOT NULL,
    HRE_MONTH NUMBER(2,0) NOT NULL,
    HRE_YEAR NUMBER(4,0) NOT NULL,
    HRE_TYPE VARCHAR2(50 CHAR) NOT NULL,
    HRE_AMOUNT NUMBER(10,3),
    CONSTRAINT PK_HISTORY_REPORTING PRIMARY KEY(HRE_ID) USING INDEX TABLESPACE TBS_ABITA_IDX
);

ALTER TABLE HISTORY_AMOUNT ALLOCATE EXTENT;
ALTER TABLE HISTORY_REPORTING ALLOCATE EXTENT;

ALTER TABLE HISTORY_CONTRACT ADD (
HCO_TEMP VARCHAR2(1 CHAR) DEFAULT 0 NOT NULL);
ALTER TABLE HISTORY_HOUSING ADD (
HHO_TEMP VARCHAR2(1 CHAR) DEFAULT 0 NOT NULL);
ALTER TABLE HISTORY_TENANT ADD (
HTE_TEMP VARCHAR2(1 CHAR) DEFAULT 0 NOT NULL);
ALTER TABLE HISTORY_BENEFITS ADD (
HBE_TEMP VARCHAR2(1 CHAR) DEFAULT 0 NOT NULL);

-- Modification de la vue de calcul du contract historisé : nouvelle colonne concernant les historisations temporaires
-- Vue des contrats avec calculs dynamiques basé sur l’archivage
CREATE OR REPLACE VIEW HISTORY_CONTRACT_DETAIL (
    HCO_ID,
	CON_ID,
	HCO_MONTH,
	HCO_YEAR,
	HCO_END_VALIDITY_DATE,
	HCO_MARKET_RENT_PRICE,
	HCO_RENT_PRICE_LIMIT,
	HCO_GARAGE_RENT,
	HCO_GARDEN_RENT,
	HCO_EXTRA_RENT,
	HCO_EXPECTED_CHARGE_COST,
	HCO_REAL_ESTATE_RENTAL_VALUE,
	HCO_HOUSEHOLD_SIZE,
	HCO_RTP_TECHNICAL_CODE,
	HCO_RTP_HOUSING_INDEX,
	HCO_FOA_LABEL,
	HCO_TERMINATION_SAVING_AMOUNT,
	HCO_ADDED_WITHDRAWN_RENT,
	HCO_TEMP,
	HHO_ID,
    HTE_ID,
	HCD_LOP_RENT,
	HCD_REVISED_SURFACE_AREA_RENT,
	HCD_SHORTTERM_CONTRACT_DISCO,
	HCD_N_N_COEF,
	HCD_NET_AGENT_RENT,
    HCD_CALCULATED_BENEFITS,
    HCD_WITHDRAWN_RENT
	) AS SELECT
	    HCO.HCO_ID,
		HCO.CON_ID,
		HCO.HCO_MONTH,
		HCO.HCO_YEAR,
		HCO.HCO_END_VALIDITY_DATE,
		HCO.HCO_MARKET_RENT_PRICE,
		HCO.HCO_RENT_PRICE_LIMIT,
		HCO.HCO_GARAGE_RENT,
		HCO.HCO_GARDEN_RENT,
		HCO.HCO_EXTRA_RENT,
		HCO.HCO_EXPECTED_CHARGE_COST,
		HCO.HCO_REAL_ESTATE_RENTAL_VALUE,
		HCO.HCO_HOUSEHOLD_SIZE,
		HCO.HCO_RTP_TECHNICAL_CODE,
		HCO.HCO_RTP_HOUSING_INDEX,
		HCO.HCO_FOA_LABEL,
		HCO.HCO_TERMINATION_SAVING_AMOUNT,
		HCO.HCO_ADDED_WITHDRAWN_RENT,
		HCO.HCO_TEMP,
		HCO.HHO_ID, 
        HCO.HTE_ID,
		VUE_HISTORY_LOP_RENT_CALC.LOP_RENT AS HCD_LOP_RENT,
		VUE_HISTORY_LSC_CALC.LSC AS HCD_REVISED_SURFACE_AREA_RENT,
		VUE_HISTORY_SHRTTRM_C_DSC_CALC.STCD AS HCD_SHORTTERM_CONTRACT_DISCO,
		VUE_HISTORY_NN_COEF_CALC.NNCOEF AS HCD_N_N_COEF,
		VUE_HISTORY_LNA_CALC.LNA AS HCD_NET_AGENT_RENT,
		GET_HISTORY_CALCULATED_BENEFIT(HTE.HTE_ACTUAL_SALARY, HHO.HHO_ROOM_COUNT, HCO.HCO_MONTH, HCO.HCO_YEAR) AS HCD_CALCULATED_BENEFITS,
		VUE_HISTORY_WD_RENT_CALC.WITHDRAWN_RENT AS HCD_WITHDRAWN_RENT
	FROM HISTORY_CONTRACT HCO
	JOIN HISTORY_HOUSING HHO ON HCO.HHO_ID = HHO.HHO_ID
	JOIN HISTORY_TENANT HTE ON HCO.HTE_ID = HTE.HTE_ID
	JOIN VUE_HISTORY_LOP_RENT_CALC ON HCO.HCO_ID = VUE_HISTORY_LOP_RENT_CALC.HCO_ID
	JOIN VUE_HISTORY_LSC_CALC ON HCO.HCO_ID = VUE_HISTORY_LSC_CALC.HCO_ID
	JOIN VUE_HISTORY_SHRTTRM_C_DSC_CALC ON HCO.HCO_ID = VUE_HISTORY_SHRTTRM_C_DSC_CALC.HCO_ID
	JOIN VUE_HISTORY_NN_COEF_CALC on HCO.HCO_ID = VUE_HISTORY_NN_COEF_CALC.HCO_ID
	JOIN VUE_HISTORY_LNA_CALC ON HCO.HCO_ID = VUE_HISTORY_LNA_CALC.HCO_ID
	JOIN VUE_HISTORY_WD_RENT_CALC ON HCO.HCO_ID = VUE_HISTORY_WD_RENT_CALC.HCO_ID
;

-- Procédure d’archivage des occupants
CREATE OR REPLACE PROCEDURE HISTORIZE_TENANT (
    PN$MONTH IN HISTORY_TENANT.HTE_MONTH%TYPE,
    PN$YEAR IN HISTORY_TENANT.HTE_YEAR%TYPE
) IS
    CURSOR TenantData IS 
        SELECT *
        FROM TENANT TEN
        INNER JOIN TYPE_TENANT TTE ON TEN.TTE_ID = TTE.TTE_ID;
BEGIN
    FOR oTenant IN TenantData LOOP
        INSERT INTO HISTORY_TENANT (
            HTE_ID,
            TEN_ID,
            HTE_MONTH,
            HTE_YEAR,
            HTE_REFERENCE,
            HTE_MANAGERIAL_EMP,
            HTE_TTE_NT_HEADER_LABEL,
            HTE_ACTUAL_SALARY,
            HTE_REFERENCE_GROSS_SALARY,
            HTE_TEMP
        )
        VALUES(
            SEQ_HISTORY_TENANT.nextVal,
            oTenant.TEN_ID,
            PN$MONTH,
            PN$YEAR,
            oTenant.TEN_REFERENCE,
            oTenant.TEN_MANAGERIAL_EMP,
            oTenant.TTE_NT_HEADER_LABEL,
            oTenant.TEN_ACTUAL_SALARY,
            oTenant.TEN_REFERENCE_GROSS_SALARY,
            0
        );
    END LOOP;
END;
/

-- Procédure d’archivage des logements
CREATE OR REPLACE PROCEDURE HISTORIZE_HOUSING (
    PN$MONTH IN HISTORY_HOUSING.HHO_MONTH%TYPE,
    PN$YEAR IN HISTORY_HOUSING.HHO_YEAR%TYPE
) IS
    CURSOR HousingData IS 
        SELECT *
        FROM HOUSING HOU
        LEFT JOIN HOUSING_NATURE HNA ON HOU.HNA_ID = HNA.HNA_ID
        INNER JOIN ROOM_CATEGORY RCA ON HOU.RCA_ID = RCA.RCA_ID;
    LC$THP_NAME THIRD_PARTY.THP_NAME%TYPE;
BEGIN
    FOR oHousing IN HousingData LOOP

        BEGIN
	        SELECT THP_NAME INTO LC$THP_NAME FROM (
	            SELECT THP_NAME
	            FROM THIRD_PARTY THP
	            INNER JOIN THIRD_PARTY_CONTRACT TPC ON THP.THP_ID = TPC.THP_ID
	            INNER JOIN HOUSING HOU ON TPC.HOU_ID = HOU.HOU_ID
	            WHERE HOU.HOU_ID = oHousing.HOU_ID
	            AND TPC.TPC_CANCELLATION_DATE IS NULL
	            ORDER BY TPC.TPC_START_VALIDITY_DATE DESC
	        ) WHERE ROWNUM = 1;
       EXCEPTION
            WHEN NO_DATA_FOUND THEN
                    LC$THP_NAME := NULL;
        END;

        INSERT INTO HISTORY_HOUSING (
            HHO_ID,
            HOU_ID,
            HHO_MONTH,
            HHO_YEAR,
            HHO_REVISED_SURFACE_AREA,
            HHO_ROOM_COUNT,
            HHO_HNA_NATURE_OF_LOCAL,
            HHO_THP_NAME,
            HHO_RCA_1ST_10_SQR_METER_PRICE,
            HHO_RCA_NEXT_SQR_METER_PRICE,
            HHO_TEMP
        )
        VALUES(
            SEQ_HISTORY_HOUSING.nextVal,
            oHousing.HOU_ID,
            PN$MONTH,
            PN$YEAR,
            oHousing.HOU_REVISED_SURFACE_AREA,
            oHousing.HOU_ROOM_COUNT,
            oHousing.HNA_NATURE_OF_LOCAL,
            LC$THP_NAME,
            oHousing.RCA_FIRST_10_SQR_METER_PRICE,
            oHousing.RCA_NEXT_SQR_METER_PRICE,
            0
        );
    END LOOP;
END;
/

-- Procédure d’archivage des avantages en nature
CREATE OR REPLACE PROCEDURE HISTORIZE_BENEFITS (
    PN$MONTH IN HISTORY_BENEFITS.HBE_MONTH%TYPE,
    PN$YEAR IN HISTORY_BENEFITS.HBE_YEAR%TYPE
) IS
    CURSOR BenefitsData IS 
        SELECT *
        FROM BENEFITS_LEVEL BLE;
BEGIN
    FOR oBenefits IN BenefitsData LOOP
        INSERT INTO HISTORY_BENEFITS (
            HBE_ID,
		    BLE_ID,
		    HBE_MONTH,
		    HBE_YEAR,
		    HBE_MINIMUM_THRESHOLD,
		    HBE_BENEFITS_ONE_ROOM,
		    HBE_BENEFITS_MANY_ROOMS,
		    HBE_TEMP
        )
        VALUES(
            SEQ_HISTORY_BENEFITS.nextVal,
            oBenefits.BLE_ID,
            PN$MONTH,
            PN$YEAR,
            oBenefits.BLE_MINIMUM_THRESHOLD,
            oBenefits.BLE_BENEFITS_ONE_ROOM,
            oBenefits.BLE_BENEFITS_MANY_ROOMS,
            0
        );
    END LOOP;
END;
/

-- Procédure d’archivage des contrats
CREATE OR REPLACE PROCEDURE HISTORIZE_CONTRACT (
    PN$MONTH IN HISTORY_CONTRACT.HCO_MONTH%TYPE,
    PN$YEAR IN HISTORY_CONTRACT.HCO_YEAR%TYPE
) IS
    CURSOR ContractData IS 
        SELECT 
            CON.*,
            FOA.FOA_LABEL,
            RTP.RTP_TECHNICAL_CODE,
            RTP.RTP_HOUSING_INDEX,
            HHO.HHO_ID AS HHO_ID,
            HTE.HTE_ID AS HTE_ID
        FROM CONTRACT CON
        INNER JOIN FIELD_OF_ACTIVITY FOA ON CON.FOA_ID = FOA.FOA_ID
        INNER JOIN RENT_TYPOLOGY RTP ON CON.RTP_ID = RTP.RTP_ID
        INNER JOIN HISTORY_HOUSING HHO ON CON.HOU_ID = HHO.HOU_ID AND HHO.HHO_MONTH = PN$MONTH AND HHO.HHO_YEAR = PN$YEAR
        INNER JOIN HISTORY_TENANT HTE ON CON.TEN_ID = HTE.TEN_ID AND HTE.HTE_MONTH = PN$MONTH AND HTE.HTE_YEAR = PN$YEAR;
BEGIN
    FOR oContract IN ContractData LOOP
        INSERT INTO HISTORY_CONTRACT (
            HCO_ID,
		    CON_ID,
		    HCO_MONTH,
		    HCO_YEAR,
		    HCO_END_VALIDITY_DATE,
		    HCO_MARKET_RENT_PRICE,
		    HCO_RENT_PRICE_LIMIT,
		    HCO_GARAGE_RENT,
		    HCO_GARDEN_RENT,
		    HCO_EXTRA_RENT,
		    HCO_EXPECTED_CHARGE_COST,
		    HCO_REAL_ESTATE_RENTAL_VALUE,
		    HCO_HOUSEHOLD_SIZE,
		    HCO_RTP_TECHNICAL_CODE,
		    HCO_RTP_HOUSING_INDEX,
		    HCO_FOA_LABEL,
		    HCO_TERMINATION_SAVING_AMOUNT,
		    HCO_ADDED_WITHDRAWN_RENT,
            HHO_ID,
            HTE_ID,
            HCO_TEMP
        )
        VALUES(
            SEQ_HISTORY_CONTRACT.nextVal,
            oContract.CON_ID,
            PN$MONTH,
            PN$YEAR,
            oContract.CON_END_VALIDITY_DATE,
            oContract.CON_MARKET_RENT_PRICE,
            oContract.CON_RENT_PRICE_LIMIT,
            oContract.CON_GARAGE_RENT,
            oContract.CON_GARDEN_RENT,
            oContract.CON_EXTRA_RENT,
            oContract.CON_EXPECTED_CHARGE_COST,
            oContract.CON_REAL_ESTATE_RENTAL_VALUE,
            oContract.CON_HOUSEHOLD_SIZE,
            oContract.RTP_TECHNICAL_CODE,
            oContract.RTP_HOUSING_INDEX,
            oContract.FOA_LABEL,
            oContract.CON_TERMINATION_SAVING_AMOUNT,
            oContract.CON_ADDED_WITHDRAWN_RENT,
            oContract.HHO_ID,
            oContract.HTE_ID,
            0
        );
    END LOOP;
END;
/